name: Check for Bugcrowd Target Changes

on:
  schedule:
    - cron: '0 0 * * *'  # Run every day at midnight
  workflow_dispatch:  # Allow manual triggering of the workflow

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up jq
        run: sudo apt-get install jq

      - name: Download the latest bugcrowd_data.json
        run: |
          # Fetch the latest bugcrowd_data.json file from the raw URL
          curl -o data/bugcrowd_data.json "https://raw.githubusercontent.com/arkadiyt/bounty-targets-data/refs/heads/main/data/bugcrowd_data.json"
      
      - name: Compare old and new target lists
        run: |
          if [ ! -f data/bugcrowd_data.json ]; then
            echo "No old version found. Saving the latest one."
            cp latest.json data/bugcrowd_data.json
            exit 0
          fi

          # Extract the names of the added and removed entries
          added=$(jq '.[].name' latest.json | sort)
          old=$(jq '.[].name' data/bugcrowd_data.json | sort)

          # Compare old and new entries to find added and removed targets
          added_list=$(comm -13 <(echo "$old") <(echo "$added"))
          removed_list=$(comm -23 <(echo "$old") <(echo "$added"))

          # If no changes, exit early
          if [ -z "$added_list" ] && [ -z "$removed_list" ]; then
            echo "No changes detected."
            exit 0
          fi

          # Prepare the plain text message
          message="Bugcrowd Target Updates"

          if [ -n "$added_list" ]; then
            message="$message\n\nAdded:\n$(echo "$added_list" | sed 's/^/- /')"
          fi
          if [ -n "$removed_list" ]; then
            message="$message\n\nRemoved:\n$(echo "$removed_list" | sed 's/^/- /')"
          fi

          # Print the message to debug and verify the format
          echo "Sending message to Discord:\n$message"

          # Escape the message content using jq to ensure proper JSON formatting
          escaped_message=$(echo "$message" | jq -Rs .)

          # Send the message to Discord via the webhook
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\":$escaped_message}" \
               "https://discord.com/api/webhooks/1271818703356297226/RcjQ9wKd27kTNb4vxeaWqmnM4D6y1ltYdu-3CinUcH1I-rtFWKkt2x-Ahz89VZ_u18BD"

      - name: Save the latest version
        run: |
          cp latest.json data/bugcrowd_data.json
