name: Check for Bugcrowd Target URL Changes

on:
  schedule:
    - cron: '0 0 * * *'  # Run every day at midnight
  workflow_dispatch:  # Allow manual triggering of the workflow

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up jq
        run: sudo apt-get install jq

      - name: Download the original bugcrowd_data.json (from arkadiyt)
        run: |
          curl -o original_bugcrowd_data.json "https://raw.githubusercontent.com/arkadiyt/bounty-targets-data/refs/heads/main/data/bugcrowd_data.json"

      - name: Download your modified bugcrowd_data.json (from rfelecT)
        run: |
          curl -o modified_bugcrowd_data.json "https://raw.githubusercontent.com/rfelecT/bounty-targets-data/refs/heads/main/data/bugcrowd_data.json"

      - name: Compare old and new target URLs
        run: |
          # Extract the URLs from the modified and original datasets
          modified_urls=$(jq -r '.[].url' modified_bugcrowd_data.json | sort)
          original_urls=$(jq -r '.[].url' original_bugcrowd_data.json | sort)

          # Compare old and new URLs to find added and removed programs
          added_urls=$(comm -13 <(echo "$original_urls") <(echo "$modified_urls"))
          removed_urls=$(comm -23 <(echo "$original_urls") <(echo "$modified_urls"))

          # If no changes, exit early
          if [ -z "$added_urls" ] && [ -z "$removed_urls" ]; then
            echo "No URL changes detected."
            exit 0
          fi

          # Prepare the plain text message
          message="Bugcrowd Target Changes:"

          if [ -n "$added_urls" ]; then
            message="$message\nAdded URLs:\n$(echo "$added_urls" | sed 's/^/- /')"
          fi
          if [ -n "$removed_urls" ]; then
            message="$message\nRemoved URLs:\n$(echo "$removed_urls" | sed 's/^/- /')"
          fi

          # Print the message to debug and verify the format
          echo "Sending message to Discord:\n$message"

          # Escape the message content using jq to ensure proper JSON formatting
          escaped_message=$(echo "$message" | jq -Rs .)

          # Send the message to Discord via the webhook
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\":$escaped_message}" \
               "https://discord.com/api/webhooks/1271818703356297226/RcjQ9wKd27kTNb4vxeaWqmnM4D6y1ltYdu-3CinUcH1I-rtFWKkt2x-Ahz89VZ_u18BD"

      - name: Overwrite the existing bugcrowd_data.json with the latest data
        run: |
          # Overwrite the existing bugcrowd_data.json with the latest data
          cp modified_bugcrowd_data.json data/bugcrowd_data.json

      - name: Commit and push the changes
        run: |
          # Configure git
          git config user.name "rfelecT"
          git config user.email "arefhsnkhani@gmail.com"

          # Stage only the modified bugcrowd_data.json file
          git add data/bugcrowd_data.json

          # Commit the changes
          git commit -m "Update bugcrowd_data.json with latest changes" || echo "No changes to commit"

          # Push the changes
          git push origin main  # Adjust 'main' to your default branch if needed
