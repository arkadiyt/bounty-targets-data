name: Notify Discord on Specific File Changes

on:
  schedule:
    - cron: '0 * * * *'  # every hour
  workflow_dispatch:

jobs:
  notify-if-data-changed:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install deepdiff

      - name: Backup old JSON files
        run: |
          cp data/bugcrowd_data.json bugcrowd_old.json || true
          cp data/intigriti_data.json intigriti_old.json || true

      - name: Fetch latest data
        run: |
          git fetch upstream
          git checkout upstream/main -- data/bugcrowd_data.json data/intigriti_data.json

      - name: Compare JSON files and extract changed URLs
        id: extract_urls
        run: |
          python3 <<EOF > changed_urls.txt
import json
from deepdiff import DeepDiff

def extract_changed_urls(old_file, new_file):
    try:
        with open(old_file) as f: old = json.load(f)
        with open(new_file) as f: new = json.load(f)
    except Exception as e:
        print(f"Could not load: {e}")
        return []

    urls = []
    old_by_url = {entry.get("url"): entry for entry in old if "url" in entry}
    new_by_url = {entry.get("url"): entry for entry in new if "url" in entry}

    for url, new_entry in new_by_url.items():
        old_entry = old_by_url.get(url)
        if not old_entry or DeepDiff(old_entry, new_entry, ignore_order=True):
            urls.append(url)
    return urls

changed_urls = extract_changed_urls("bugcrowd_old.json", "data/bugcrowd_data.json")
changed_urls += extract_changed_urls("intigriti_old.json", "data/intigriti_data.json")

if changed_urls:
    for url in changed_urls:
        print(url)
else:
    print("No changes detected")
EOF

      - name: Send Discord Notification (URLs Only)
        if: success()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          CHANGED_URLS=$(cat changed_urls.txt)
          
          # Send messages in chunks if the URLs list is too long
          CHUNK_SIZE=1900
          TOTAL_LENGTH=${#CHANGED_URLS}

          if [ -n "$CHANGED_URLS" ]; then
            for (( i=0; i<TOTAL_LENGTH; i+=CHUNK_SIZE )); do
              PART="${CHANGED_URLS:i:CHUNK_SIZE}"
              curl -H "Content-Type: application/json" \
                -X POST \
                -d "{\"content\": \"ðŸ”” **Changed URLs:**\n\`\`\`\n$PART\n\`\`\`\"}" \
                $DISCORD_WEBHOOK_URL
            done
          else
            curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"content\": \"ðŸ”” **No changes detected in URLs.**\"}" \
              $DISCORD_WEBHOOK_URL
          fi
